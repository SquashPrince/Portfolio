using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class PlayerControll : MonoBehaviour {

    public int P_HP = 10;
    public int P_initHP = 10;

    public Rigidbody2D RB;
    public float P_Speed = 300f;

    public Transform TR;
    public GameObject wallTR;

    public GameObject hpBar;

    public GameObject itemGetEffect;
    public GameObject deadEffect;

    public GameObject manager;

    float xPos;
    float yPos;

    void Awake()
    {
        P_HP = P_initHP;
        manager = GameObject.Find("GameManager");
        hpBar = GameObject.Find("HP_Bar");
        wallTR = GameObject.Find("Wall");
    }

    void Update () {
        // 이동 설정
        xPos = Input.GetAxis("Horizontal");
        yPos = Input.GetAxis("Vertical");

        Vector2 dir = new Vector2(xPos, yPos);
        RB.velocity = dir * P_Speed * Time.deltaTime;

        

        // 화면 이동 제한
        float size = Camera.main.orthographicSize;
        float offset = 0.25f;

        if(TR.position.y >= size - offset)
        {
            TR.position = new Vector3(TR.position.x, size - offset, 0);
        }
        if (TR.position.y <= -size + offset)
        {
            TR.position = new Vector3(TR.position.x, -size + offset, 0);
        }

        float ScreenRatio = (float)Screen.width / (float)Screen.height;
        float wSize = Camera.main.orthographicSize * ScreenRatio;


        if (TR.position.x >= wSize - offset)
        {
            TR.position = new Vector3(wSize - offset, TR.position.y, 0);
        }
        if (TR.position.x <= -wSize + offset)
        {
            TR.position = new Vector3(-wSize + offset, TR.position.y, 0);
        }

        // 벽 충돌 제한
        if (wallTR.transform.position.y - TR.position.y <= 0.8f)
        {
            TR.position = new Vector3(TR.position.x, wallTR.transform.position.y - 0.8f);
        }
    }

    public void OnTriggerEnter2D(Collider2D coll)
    {
        if (coll.CompareTag("E_Bullet"))
        {
            P_HP--;
            hpBar.GetComponent<Image>().fillAmount -= 0.1f;
            if (P_HP == 0)
            {
                GameManager.score += 5000;

                manager.GetComponent<GameManager>().deadSwitch = true;

                Instantiate(deadEffect, TR.position, Quaternion.identity);
                Destroy(this.gameObject);
            }

        } // 적 총알에 피격

        if (coll.CompareTag("Item"))
        {
            P_HP += 2;
            hpBar.GetComponent<Image>().fillAmount += 0.2f;
            if (P_HP > 10)
            {
                P_HP = 10;
            }
            GetComponent<FireControll>().PosLength = 4; // 아이템 획득 [파츠강화]
            Instantiate(itemGetEffect, TR.position, Quaternion.identity);

        } // 아이템 획득
    }
}
